---
import { getCollection, type CollectionEntry } from "astro:content";
import FormattedDate from "../components/FormattedDate.astro";
import MainLayout from "./MainLayout.astro";
import ClientFormattedDate from "../components/FormattedDate.client";

const { pathname } = Astro.url;

type Props = CollectionEntry<"blog">["data"];

const { title, description, pubDate, updatedDate, heroImage, status } = Astro.props;
const posts = (await getCollection("blog"))
  .filter((p) => !pathname.includes(p.slug))
  .filter((p) => ["published", "draft", "archived"].includes(p.data.status))
  .sort((a, b) => a.data.pubDate.valueOf() - b.data.pubDate.valueOf())
  .slice(0, 3);
---

<MainLayout>
  <article class="flex flex-col w-full">
    <div class="w-full flex flex-col rounded-md overflow-clip">
      {heroImage && <img src={heroImage} alt="" />}
    </div>
    <div class="prose max-w-none prose-neutral dark:prose-invert w-full">
      <div class="flex flex-col gap-2 py-4 w-full pb-24">
        <div class="flex flex-col gap-8 w-full">
          <div class="flex flex-row justify-between w-full gap-2">
            <div class="w-max flex flex-row gap-2">
              {
                status === "draft" && (
                  <div class="flex flex-row items-center gap-1 bg-yellow-300 dark:bg-yellow-600 rounded px-1.5 py-0.5 text-xs text-black dark:text-white border border-yellow-400 dark:border-yellow-500">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      width="12"
                      height="12"
                      viewBox="0 0 24 24"
                      fill="none"
                      stroke="currentColor"
                      stroke-width="2"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                    >
                      <>
                        <path d="m12 3-1.912 5.813a2 2 0 0 1-1.275 1.275L3 12l5.813 1.912a2 2 0 0 1 1.275 1.275L12 21l1.912-5.813a2 2 0 0 1 1.275-1.275L21 12l-5.813-1.912a2 2 0 0 1-1.275-1.275L12 3Z" />
                        <path d="M5 3v4" />
                        <path d="M19 17v4" />
                        <path d="M3 5h4" />
                        <path d="M17 19h4" />
                      </>
                    </svg>
                    Draft
                  </div>
                )
              }
              {
                status === "archived" && (
                  <div class="flex flex-row items-center gap-1 bg-neutral-300 dark:bg-neutral-600 rounded px-1.5 py-0.5 text-xs border border-neutral-400 dark:border-neutral-500">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      width="12"
                      height="12"
                      viewBox="0 0 24 24"
                      fill="none"
                      stroke="currentColor"
                      stroke-width="2"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                    >
                      <rect width="20" height="5" x="2" y="3" rx="1" />
                      <path d="M4 8v11a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8" />
                      <path d="M10 12h4" />
                    </svg>
                    Archived
                  </div>
                )
              }
              {
                status === "hidden" && (
                  <div class="flex flex-row items-center gap-1 bg-transparent rounded px-1.5 py-0.5 text-xs border border-neutral-400 dark:border-neutral-500">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      width="12"
                      height="12"
                      viewBox="0 0 24 24"
                      fill="none"
                      stroke="currentColor"
                      stroke-width="2"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                    >
                      <path d="M9.88 9.88a3 3 0 1 0 4.24 4.24" />
                      <path d="M10.73 5.08A10.43 10.43 0 0 1 12 5c7 0 10 7 10 7a13.16 13.16 0 0 1-1.67 2.68" />
                      <path d="M6.61 6.61A13.526 13.526 0 0 0 2 12s3 7 10 7a9.74 9.74 0 0 0 5.39-1.61" />
                      <line x1="2" x2="22" y1="2" y2="22" />
                    </svg>
                    Hidden
                  </div>
                )
              }
              <FormattedDate date={pubDate} />
            </div>
            {
              updatedDate && (
                <div class="text-xs flex flex-row gap-2 items-center">
                  Last updated <ClientFormattedDate relative date={updatedDate} client:load />
                </div>
              )
            }
          </div>
          <div class="flex flex-col gap-4 w-full">
            <h1 class="w-full my-0">{title}</h1>
            <span class="w-full text-xs">{description}</span>
          </div>
        </div>
        <div class="w-full text-justify">
          <slot class="w-full" />
        </div>
        {
          posts.length > 0 ? (
            <>
              <hr class="w-full my-2" />
              <div class="flex flex-col items-start w-full gap-2">
                <h2 class="w-full">More Blogs</h2>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2 w-full">
                  {posts.map((b) => (
                    <a
                      href={`/blog/${b.slug}`}
                      class="w-full border border-neutral-300 dark:border-neutral-700 rounded-md p-4 bg-white dark:bg-black no-underline shadow-none hover:shadow-md transition-shadow duration-200 ease-in-out gap-2 flex flex-col items-start justify-start"
                    >
                      <FormattedDate date={b.data.pubDate} />
                      <span class="w-full py-0">{b.data.title}</span>
                    </a>
                  ))}
                </div>
              </div>
            </>
          ) : null
        }
      </div>
    </div>
  </article>
</MainLayout>
